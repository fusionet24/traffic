package traffic;                    // Belongs to the package 'traffic'

import java.util.*;                 // Imports all necessary libraries
import javax.swing.table.*;
import java.io.*;
import java.net.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class logic {                // Main logic class
    
    int noLanes = 4;                // The number of lanes in the junction - can be changed to any number
    int trafficMaxWait = noLanes*6; // Maximum the traffic is allowed to wait
    int carsMin = 1;                // Minimum amount of cars for a lane to be opened
    int pedMaxWait = 30;            // Maximum time pedestrians is allowed to wait
    int pedMax = noLanes*6;         // Maximum number of pedestrians before release
    boolean running = true;         // Should the program still be running
    
    long StartTimer[] = new long[noLanes];          // Initialise Timers
    long ComparisionTimer[] = new long[noLanes];    // Initialise Comparision Timers
    
    public Queue[] lanes = listQueues(noLanes);     // Creates an array of queues for every lane
    
    public int currentOpen = 0;                     // 0 means pedestrians
    
    public long[] cWait = new long[noLanes];        // An array of floats containing the timer values
    
    public long pWait = 0;                          // Time the pedestrians have been waiting
    public int pTotal = 0;                          // Total number of pedestrians waiting
    public long pStartWait = 0;                     // Used for calculating pWait
    
    public static void main(String [] args){        // Start of the main function
            
            logic logic1 = new logic();             // Creates new instance of logic
            
            TrafficGUI trafficGUI = new TrafficGUI();       // Creates instance of the GUI for traffic simulation
            trafficGUI.setVisible(true);                    // Makes the GUI visible
            DefaultTableModel model = (DefaultTableModel) trafficGUI.jTable1.getModel();    // Gets the model for the table for later manipulation
            
            for (int i=0; i < logic1.lanes.length; i++){    // For loop that creates the rows of the table - scales depending on noLanes
                model.addRow(new Object[]{i+1,(logic1.lanes[i].size()),0, logic1.cWait[i]});   // Creates the row using the value, 0 for red light and the current wait time
            }
            
            Arrays.fill(logic1.StartTimer, System.currentTimeMillis());             // Fill Start timer with current time
            logic1.pStartWait = System.currentTimeMillis();                         // Sets the initial start time

            new Thread ( () -> {                                                    // Creates the thread that updates the lights
                while (logic1.running = true){                                      // While the logic class is still running
                    logic1.updateLights(model);                                     // Update the traffic lights - passes in the GUI model
                    try {                                                           // Tries to sleep the thread, catches errors
                        Thread.sleep(5000);                                         
                    } catch (InterruptedException ex) {
                        Logger.getLogger(logic.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }
            }).start();                                                             // Starts the thread
            
            new Thread( () -> {                                                     // Creates a new thread that lets cars out of open lanes
                while (logic1.running = true){                                      // While the logic class is still running
                    logic1.OpenLane(model, trafficGUI);                             // Calls OpenLane method and passes in the model and the GUI
                    try {                                                           // Tries to sleep the thread, catches errors
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(logic.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }  
            }).start();                                                             // Starts the thread
            
            
            try {                                                                       // Tries to create a new socket
                Socket testSocket = new Socket("192.168.0.208", 5000);                  // Creates the socket using the ip and port details
                System.out.println("Connection = " +testSocket.isConnected());          // Prints the line stating that the connection has been made
                PrintWriter out = new PrintWriter(testSocket.getOutputStream(), true);  // Creates the output stream for user input to the server
                out.println("REGI");                                                    // Registers client with server
                out.println("BEGI");                                                    // Begins the simulation
                BufferedReader in = new BufferedReader(                                 // Creates the buffered reader for inputs from the server
                new InputStreamReader(testSocket.getInputStream()));                    // Creates the input stream reader
                
                String fromServer;                                                      // Initialise the string 'fromServer'
                while ((fromServer = in.readLine()) != null) {                          // While the server sends input
                    System.out.println("Server: " + fromServer);
                    logic1.newInfo(fromServer, model, trafficGUI);
                    if (trafficGUI.isButtonClicked == true){
                        out.println("EXIT");
                        out.flush();
                        out.close();
                        in.close();
                        testSocket.close();
                        System.exit(0);
                    }
                }
            }catch(IOException e){}       
    } 
    
    // Creation of an array of queues
    public Queue[] listQueues (int noLanes) {
        Queue[] queues = new Queue[noLanes]; 
        for(int i = 0; i <= (noLanes-1); i++){
            queues[i] = new LinkedList();
        }
        return queues;
    }
    
    // Finds the index of the location with the lowest value
    public int getLargeLong (long[] array) {
        long currentValue = array[0]; 
        int largestIndex = 0;
        for (int i=1; i < array.length; i++) {
            if (array[i] > currentValue){ 
                currentValue = array[i];
                largestIndex = i;
            }
        }
        return largestIndex;
    }

    // Adds a new car to the relevant queue with its destination
    public void newInfo (String input, DefaultTableModel model, TrafficGUI trafficGUI) {
        //String Loc = input.substring(0,1);
        //String Dest = input.substring(2,3);
        String delims = "[;]";
        String[] tokens = input.split(delims);
        //System.out.println("Tokens: " + tokens[0]);
        for (int i=0; i < tokens.length; i++){
            if (tokens[i].length() <= 2 && tokens[i].length() > 0){   // If its a pedestrian
                pTotal++;
                trafficGUI.jLabel3.setText(String.valueOf(pTotal));
                // pedestrian timer goes here
            }else if (tokens[i].length() > 2 && tokens[i].length() < 10){  // Its a car
                String delims2 = "[:]";
                String[] tokens2 = tokens[i].split(delims2);
                //System.out.println(tokens2[0]);
                //System.out.println(tokens2[1]);
                int iLoc = Integer.parseInt(tokens2[0]);
                int iDest = Integer.parseInt(tokens2[1]);
                lanes[iLoc-1].add(iDest);
                model.setValueAt(lanes[iLoc-1].size(), iLoc-1, 1);
            }
        }
    }
    
    public void updateLights (DefaultTableModel model) {
        
        int large = getLargeLane(lanes);
        int longWait = getLargeLong(cWait);
        Arrays.fill(ComparisionTimer, System.currentTimeMillis()); // FILL Comparision Timer with current time
        pWait = (System.currentTimeMillis() - pStartWait)/1000;
        
        for(int i=0; i < noLanes; i++){
            cWait[i] = (ComparisionTimer[i] - StartTimer[i])/1000; //Saves it in seconds from milliseconds
            model.setValueAt(cWait[i], i, 3);
        }  
        
        if ((pWait > pedMaxWait) || (pTotal > pedMax)){                    // if pedestrian has waited longer than max
            currentOpen = 0;
            pWait = 0;
            pStartWait = System.currentTimeMillis();
            changeLight(model);
            System.out.println("trigger1");
        }
        else if (cWait[longWait] > trafficMaxWait){    // if car has waited longer than max
            currentOpen = longWait + 1;
            changeLight(model);
            clearWait(model);
            System.out.println("trigger2");
        }
        else if (lanes[large].size() >= carsMin){   // if there are more cars than max
            currentOpen = large + 1;
            changeLight(model);
            clearWait(model);
            System.out.println("trigger3");
        }
        else{
            currentOpen = 0;
            pWait = 0;
            pStartWait = System.currentTimeMillis();
            changeLight(model);
            System.out.println("trigger4");
        }
    }
    
    public void changeLight(DefaultTableModel model){
        for (int i=0; i < lanes.length; i++) {
            model.setValueAt(0, i, 2);
        }
        if (currentOpen != 0){
            model.setValueAt(1, currentOpen-1, 2);
        }
    }
    
    public void clearWait(DefaultTableModel model){
        StartTimer[currentOpen-1] = System.currentTimeMillis();
        cWait[currentOpen-1] = 0;
        model.setValueAt(cWait[currentOpen-1], currentOpen-1, 3);
    }
    
    public void OpenLane (DefaultTableModel model, TrafficGUI trafficGUI) {
    //Timer for 5 seconds
       long startTime = System.currentTimeMillis();
           
            if(currentOpen == 0){
                if(pTotal > 0){
                    pTotal--;
                    trafficGUI.jLabel3.setText(String.valueOf(pTotal));
                }
                System.out.println("Letting pedestrians cross");
            }
            else if(lanes[currentOpen-1].peek() == null){    //Catches empty queue to make sure no poping is done.
                System.out.println("No cars currently waiting");
            }
            else{
                System.out.println("Car travelling in " + lanes[(currentOpen-1)].poll() + " direction. Leaves lane no. " + (currentOpen-1));    // Give Text Field Output
                model.setValueAt(lanes[currentOpen-1].size(), (currentOpen-1), 1);
            }
    }
    
    public int getLargeLane(Queue[] lanes) {
        int largest = 0;
        int largestIndex = 0;
        for (int i = 0; i < noLanes; i++){
            if (lanes[i].size() > largest){
                largest = lanes[i].size();
                largestIndex = i;
            }
        }
        return largestIndex;
    }  
}
